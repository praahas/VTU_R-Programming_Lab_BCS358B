good.months
#Bad Months
bad.months<-!good.months
bad.months
#The best month
best.month<-profit.after.tax == max(profit.after.tax)
best.month
#The worst month
worst.month<-profit.after.tax == min(profit.after.tax)
worst.month
#Result Presentation according to requirement
revenue.1000<-round(revenue/1000,0)
revenue.1000
expenses.1000<-round(expenses/1000,0)
expenses.1000
profit.1000<-round(profit/1000,0)
profit.1000
profit.after.tax.1000<-round(profit.after.tax/1000,0)
profit.after.tax.1000
#Output
revenue.1000
expenses.1000
profit.1000
profit.after.tax.1000
profit.margin
good.months
bad.months
best.month
worst.month
financials
financials <- rbind(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month
)
financials
colnames(financials) <- months
View(financials)
write.csv(financials, file= "Financial Statement.csv", append=FALSE,  row.names=TRUE, col.names=TRUE)
getwd()
)
rm(list=ls())
A <- matrix(1:9, nrow=3, ncol=3,byrow=TRUE)#Create MAtrix A
B <- matrix(2:10, nrow=3, ncol=3,byrow=TRUE)#Create MAtrix B
A
AT<-t(A)#Transpose of Matrix using t()
AT
mat_sum<-A+B#Add MAtrix
mat_sum
mat_dif<-A-B #get difference of Matrix A and B
mat_dif
mat_dif1
mat_dif1<-B-A
mat_dif1
mat_prod<-A*B#Vector MUltiplication
mat_prod
mat_prod1<-A%*%B#Matrix Multiplication
mat_prod1
A <- matrix(1:9, nrow=2, ncol=3,byrow=TRUE)#Create MAtrix A
B <- matrix(2:10, nrow=3, ncol=3,byrow=TRUE)#Create MAtrix B
mat_sum<-A+B#Add MAtrix
A <- matrix(1:9, nrow=2, ncol=3,byrow=TRUE)#Create MAtrix A
B <- matrix(2:10, nrow=3, ncol=3,byrow=TRUE)#Create MAtrix B
A
3
3
3
3
3
#Method 1:
nfact2<-function(n){
if(n==1){
cat("Called nfact2(1)\n")
return(1)
}else{
cat("called nfact2(",n,")\n",sep="")
return(n*nfact2(n-1))
}
}
nfact2(6)
1:n
n=6
1:n
prod(1:n)
primesieve<- function(sieved,unsieved){
p<-unsieved[1]
n<-unsieved[length(unsieved)]
if(p^2 >n){
return(c(sieved, unsieved))
}else{
unsieved<-unsieved[unsieved%%p!=0]
sieved<-c(sieved,p)
return(primesieve(sieved,unsieved))  	 }
}
primesieve(c(),2:200)
library(MASS)
#Click on the Packages Tab on the Right Hand Side of the IDE. Select MASS.
# Part a: Find the Pearson and Spearman correlation coefficients. Are they similar?
data(mammals)
#Click on the Packages Tab on the Right Hand Side of the IDE. Select MASS.
# Part a: Find the Pearson and Spearman correlation coefficients. Are they similar?
View(mammals)
?View()
?mammals
pearson_corr <- cor(mammals$brain, mammals$body, method = "pearson")
spearman_corr <- cor(mammals$brain, mammals$body, method = "spearman")
print(paste("Pearson correlation coefficient:", pearson_corr))
print(paste("Spearman correlation coefficient:", spearman_corr))
# Part b: Plot the data using the plot command
plot(mammals$body, mammals$brain, xlab = "Body Weight", ylab = "Brain Weight", main = "Body Weight vs. Brain Weight")
# Part c: Plot the logarithm (log) of each variable and see if that makes a difference
plot(log(mammals$body), log(mammals$brain), xlab = "log(Body Weight)", ylab = "log(Brain Weight)", main = "log(Body Weight) vs. log(Brain Weight)")
rm(list=ls())
item1<- c('1001','Electronics','700')
item2<- c('1002','Desktop Supplies','300')
item3<- c('1003','Office Supplies','350')
item4<- c('1004','USB','400')
item5<- c('1005','CD Drive','800')
# Add rows
itemList = list(item1,item2,item3,item4,item5)
#Set Column Names
columns<-c('itemCode','itemCategory','itemPrice')
#Create Empty DataFrame
itemData = data.frame(matrix(nrow = 0, ncol = length(columns)))
itemData
# assign column names
colnames(itemData) = columns
View(itemData)
#Append Rows to Dataframe
for(item in itemList){
itemData[nrow(itemData)+1,]<-item
}
View(itemData)
#Create Required subsets
sub_itemData_gt350<-subset(itemData, itemData$itemPrice >= 350)
View(sub_itemData_gt350)
sub_itemData_supplies<-subset(itemData, (itemData$itemCategory=='Office Supplies') |(itemData$itemCategory=='Desktop Supplies'))
View(sub_itemData_supplies)
#CReate Seond Dataframe
itemDetailsColumn<-c('itemCode','ItemQtyonHand','ItemReorderLvl')
itemDetails = data.frame(matrix(nrow = 0, ncol = length(itemDetailsColumn)))
colnames(itemDetails) = itemDetailsColumn
View(itemDetails)
itemDetails1<- c('1001','15','2')
itemDetails2<- c('1002','10','2')
itemDetails3<- c('1003','20','4')
itemDetails4<- c('1004','12','5')
itemDetails5<- c('1005','5','1')
itemDetailsList = list(itemDetails1,itemDetails2,itemDetails3,itemDetails4,itemDetails5)
for(itemDetail in itemDetailsList){
itemDetails[nrow(itemDetails)+1,]<-itemDetail
}
View(itemDetails)
#Performing an Inner Join merge
merged <- merge(itemData, itemDetails, by = "itemCode")
merged
rm(list=ls())
View(airquality)
air<-airquality
air$Month
?airquality
air$Month
air<-airquality
rm(list=ls())
View(airquality)
?airquality
air<-airquality
air
air$Month
air$Month <- factor(air$Month,labels=c("May","June","July","August","September"))
air$Month
View(air)
rm(list=ls())
View(airquality)
?airquality
air<-airquality
library(ggplot2)
air$Month <- factor(air$Month,labels=c("May","June","July","August","September"))
gg1 <- ggplot(air,aes(x=1:nrow(air),y=Temp)) +
geom_line(aes(col=Month)) +
geom_point(aes(col=Month,size=Wind)) +
geom_smooth(method="loess",col="black") +
labs(x="Time (days)",y="Temperature (F)")
gg1 <- ggplot(air,aes(x=1:nrow(air),y=Temp)) +
geom_line(aes(col=Month)) +
geom_point(aes(col=Month,size=Wind)) +
geom_smooth(method="loess",col="black") +
labs(x="Time (days)",y="Temperature (F)")
install.packages(ggplot2)
install.packages(ggplot)
install.packages("ggplot")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
rm(list=ls())
?airquality
air<-airquality
#install.packages("ggplot2")
library(ggplot2)
library("gridExtra")
air$Month <- factor(air$Month,labels=c("May","June","July","August","September"))
gg1 <- ggplot(air,aes(x=1:nrow(air),y=Temp)) +
geom_line(aes(col=Month)) +
geom_point(aes(col=Month,size=Wind)) +
geom_smooth(method="loess",col="black") +
labs(x="Time (days)",y="Temperature (F)")
gg1 <- ggplot(air,aes(x=1:nrow(air),y=Temp)) +
geom_line(aes(col=Month)) +
geom_point(aes(col=Month,size=Wind)) +
geom_smooth(method="loess",col="black") +
labs(x="Time (days)",y="Temperature (F)")
gg2 <- ggplot(air,aes(x=Solar.R,fill=Month)) +
geom_density(alpha=0.4) +
labs(x=expression(paste("Solar radiation (",ring(A),")")),
y="Kernel estimate")
gg3 <- ggplot(air,aes(x=Wind,y=Temp,color=Month)) +
geom_point(aes(size=Ozone)) +
geom_smooth(method="lm",level=0.9,fullrange=FALSE,alpha=0.2) +
labs(x="Wind speed (MPH)",y="Temperature (F)")
grid.arrange(gg1,gg2,gg3)
s<-ggplot(data=air,aes(x=Ozone, y=..density..))
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
s+geom_histogram(binwidth=10,aes(fill=Month))+
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
s<-ggplot(data=air,aes(x=Temp, y=..density..))
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 5, colour = 4,
fill = 4, alpha = 0.25)
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 1, colour = 6,
fill = 4, alpha = 0.25)
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 1, colour = 6,
fill = 1, alpha = 0.25)
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 1, colour = 6,
fill = 1, alpha = 1)
4
4
s<-ggplot(data=air,aes(x=Temp, y=..density..))
s<-ggplot(data=air,aes(x=Temp, y=..density..))
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
s<-ggplot(data=air,aes(x=Temp, y=density))
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
s<-ggplot(data=air,aes(x=Temp, y=..density..))
s+geom_histogram(binwidth=10,aes(fill=Month),colour="Black")+
geom_density(lwd = 1, colour = 4,
fill = 4, alpha = 0.25)
?airquality
s<-ggplot(data=air,aes(x=Ozone, y=..density..))
#setwd('SPECIFY PATHNAME HERE')
# Importing the dataset
dataset = read.csv('input.csv')
View (dataset)
setwd('C:/Users/Praahas/Projects/R-Lab/dataset')
#setwd('SPECIFY PATHNAME HERE')
# Importing the dataset
dataset = read.csv('input.csv')
View (dataset)
typeof(dataset)
number.of.rows=nrow(dataset)
number.of.columns=ncol(dataset)
number.of.rows=nrow(dataset)
number.of.columns=ncol(dataset)
print("number of rows:")
print(number.of.rows)
print("number of columns:")
print(number.of.columns)
max_salary = max(dataset$salary)
max_salary
max_salaries <- subset(dataset, dataset$salary == max(dataset$salary))
max_salaries
IT_Dept<-subset(dataset, dataset$department == 'IT')
IT_Dept
IT_Dept<-s
IT_Dept<-s
IT_Dept<-subset(dataset, dataset$department == 'IT')
IT_Dept
salary_gt_value<-subset(dataset, dataset$salary > 20000)
salary_gt_value
write.csv(salary_gt_value,"output.csv", row.names = FALSE)
getwd()
write.csv(salary_gt_value,"output1.csv", row.names = FALSE)
getwd()
setwd('C:/Users/Praahas/Projects/VTU-RProgramming/dataset')
#setwd('SPECIFY PATHNAME HERE')
# Importing the dataset
dataset = read.csv('input.csv')
View (dataset)
typeof(dataset)
dataset
number.of.rows=nrow(dataset)
number.of.columns=ncol(dataset)
print("number of rows:")
print(number.of.rows)
print("number of columns:")
print(number.of.columns)
max_salary = max(dataset$salary)
max_salary
max_salaries <- subset(dataset, dataset$salary == max(dataset$salary))
max_salaries
IT_Dept<-subset(dataset, dataset$department == 'IT')
IT_Dept
salary_gt_value<-subset(dataset, dataset$salary > 20000)
salary_gt_value
write.csv(salary_gt_value,"output1.csv", row.names = FALSE)
dataset[nrow(dataset)+1,]<-list(nrow(dataset)+1,'2023001','XYZ','5000','01-01-2023','IT')
View (dataset)
rm(list=ls())
#library(moments)
library(e1071)
library(ggplot2)
#Read description about the dataset
?mtcars
carData <- mtcars
#TOtal NUmber of Observations
# Use dim() to find the dimension of the data set
dim(carData)
[1]
number.of.observations<-dim(carData)[1]
number.of.variables<-dim(carData)[2]
carData
car.with.largest.hp<-row.names(subset(carData, carData$hp==max(carData$hp)))
car.with.largest.hp
car.with.least.hp<-row.names(subset(carData, carData$hp==min(carData$hp)))
car.with.least.hp
?hist
hist(carData$mpg,col="green", border="black",prob = TRUE)
lines(density(carData$mpg),col = "chocolate3")
skewness(carData$mpg,type=2)
kurtosis(carData$mpg,type=2)
hist(carData$disp,col="green",border="black",prob = TRUE)
lines(density(carData$disp),col = "chocolate3")
skewness(carData$disp,type=2)
kurtosis(carData$disp,type=2)
hist(carData$hp,col="green",border="black", prob = TRUE)
lines(density(carData$hp),col = "chocolate3")
skewness(carData$hp,type=2)
kurtosis(carData$hp,type=2)
hist(carData$drat,col="green",border="black",prob = TRUE)
lines(density(carData$drat),col = "chocolate3")
skewness(carData$drat,type=2)
kurtosis(carData$drat,type=2)
hist(carData$wt,col="green",border="black",prob = TRUE)
lines(density(carData$wt),col = "chocolate3")
skewness(carData$wt,type=2)
kurtosis(carData$wt,type=2)
hist(carData$qsec,col="green",border="black",prob = TRUE)
lines(density(carData$qsec),col = "chocolate3")
skewness(carData$qsec,type=2)
kurtosis(carData$qsec,type=2)
carData.4cyl.hp<-subset(carData,carData$cyl==4)["hp"]
carData.8cyl.hp<-subset(carData,carData$cyl==8)["hp"]
carData.4cyl.hp<-subset(carData,carData$cyl==4)["hp"]
carData.8cyl.hp<-subset(carData,carData$cyl==8)["hp"]
carData.4cyl.hp
carData.8cyl.hp
diff.gross.hp<-round(mean(carData.8cyl.hp[,1])-mean(carData.4cyl.hp[,1]))
print(diff.gross.hp)
diff.sd<-round(sd(carData.8cyl.hp[,1])-sd(carData.4cyl.hp[,1]))
print(diff.sd)
carData.4cyl.hp<-subset(carData,carData$cyl==4)["hp"]
carData.8cyl.hp<-subset(carData,carData$cyl==8)["hp"]
diff.gross.hp<-round(mean(carData.8cyl.hp[,1])-mean(carData.4cyl.hp[,1]))
print(diff.gross.hp)
diff.sd<-round(sd(carData.8cyl.hp[,1])-sd(carData.4cyl.hp[,1]))
print(diff.sd)
print(cor(carData$mpg, carData$cyl, method = 'pearson'))
print(cor(carData$mpg, carData$disp, method = 'pearson'))
print(cor(carData$mpg, carData$hp, method = 'pearson'))
print(cor(carData$mpg, carData$drat, method = 'pearson'))
print(cor(carData$mpg, carData$wt, method = 'pearson'))
print(cor(carData$mpg, carData$qsec, method = 'pearson'))
print(cor(carData$cyl, carData$disp, method = 'pearson'))
print(cor(carData$cyl, carData$hp, method = 'pearson'))
print(cor(carData$cyl, carData$drat, method = 'pearson'))
print(cor(carData$cyl, carData$wt, method = 'pearson'))
print(cor(carData$cyl, carData$qsec, method = 'pearson'))
print(cor(carData$disp, carData$hp, method = 'pearson'))
print(cor(carData$disp, carData$drat, method = 'pearson'))
print(cor(carData$disp, carData$wt, method = 'pearson'))
print(cor(carData$disp, carData$qsec, method = 'pearson'))
print(cor(carData$hp, carData$drat, method = 'pearson'))
print(cor(carData$hp, carData$wt, method = 'pearson'))
print(cor(carData$hp, carData$qsec, method = 'pearson'))
print(cor(carData$drat, carData$wt, method = 'pearson'))
print(cor(carData$drat, carData$qsec, method = 'pearson'))
print(cor(carData$wt, carData$qsec, method = 'pearson'))
cor(carData)
cor_df <- round(cor(carData), 2)
#melt the data frame
melted_cormat <- melt(cor_df)
#create correlation heatmap
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) +
geom_tile() +
geom_text(aes(Var2, Var1, label = value), size = 5) +
scale_fill_gradient2(low = "blue", high = "red",
limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_blank())
#melt the data frame
melted_cormat <- melt(cor_df)
cor(carData)
cor_df <- round(cor(carData), 2)
#melt the data frame
melted_cormat <- melt(cor_df)
cor(carData)
cor(carData)
cor(carData)
cor(carData)
cor_df <- round(cor(carData), 2)
#melt the data frame
melted_cormat <- melt(cor_df)
cor(carData)
cor_df <- round(cor(carData), 2)
#melt the data frame
melted_cormat <- melt(cor_df)
library(melt)
setwd('C:/Users/Praahas/Projects/VTU-RProgramming/dataset')
#setwd('SPECIFY PATHNAME HERE')
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
View (dataset)
#setwd('SPECIFY PATHNAME HERE')
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
View (dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
?lm()
# Fitting Simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set
View(training_set)
View(test_set)
# Fitting Simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
regressor
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Validation set)') +
xlab('Years of experience') +
ylab('Salary')
y_pred
ggplot() +
geom_point(aes(x = test_set$Salary, y = y_pred),
colour = 'red') +
ggtitle('Salary vs Experience (Validation set)') +
xlab('Years of experience') +
ylab('Salary')
ggplot() +
geom_point(aes(x = test_set$Salary, y = y_pred),
colour = 'red') +
ggtitle('Correlation between Actual Points and Predicted Points') +
xlab('Actual Value') +
ylab('Predicted Value')
errorVec<-test_set$Salary - y_pred
errorVec
